openapi: 3.0.3
info:
  title: EduTest API
  description: API for online testing platform
  version: 1.0.0
  contact:
    name: EduTest Team
    email: contact@edutest.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.edutest.com/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile operations
  - name: Admin
    description: Administrative operations (admin only)
  - name: Groups
    description: Student group management
  - name: Tests
    description: Test management and execution
  - name: Assignments
    description: Assignment management within tests

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Refresh expired JWT token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token

  # User Profile Endpoints
  /users/profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Get profile information for authenticated user
      operationId: getCurrentUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

    put:
      tags:
        - Users
      summary: Update current user profile
      description: Update profile information for authenticated user
      operationId: updateCurrentUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

  # Admin - User Management Endpoints
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Get paginated list of users (admin only)
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserRole'
          description: Filter by user role
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search by username, email, firstName or lastName
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPageResponse'
        '403':
          description: Access denied - admin role required

  /admin/users/{userId}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      description: Get user information by ID (admin only)
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
        '403':
          description: Access denied - admin role required

    put:
      tags:
        - Admin
      summary: Update user
      description: Update user information (admin only)
      operationId: updateUser
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
        '403':
          description: Access denied - admin role required

    delete:
      tags:
        - Admin
      summary: Delete user
      description: Delete user account (admin only)
      operationId: deleteUser
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '403':
          description: Access denied - admin role required

  /admin/students:
    post:
      tags:
        - Admin
      summary: Create student account
      description: Create new student account (admin only)
      operationId: createStudent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input data
        '409':
          description: Username or email already exists
        '403':
          description: Access denied - admin role required

  /admin/teachers:
    post:
      tags:
        - Admin
      summary: Create teacher account
      description: Create new teacher account (admin only)
      operationId: createTeacher
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeacherRequest'
      responses:
        '201':
          description: Teacher created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input data
        '409':
          description: Username or email already exists
        '403':
          description: Access denied - admin role required

  # Group Management Endpoints
  /groups:
    get:
      tags:
        - Groups
      summary: Get groups
      description: Get groups for current user (teacher gets their groups, student gets their group)
      operationId: getGroups
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Groups retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentGroup'

    post:
      tags:
        - Groups
      summary: Create new group
      description: Create new student group (teacher only)
      operationId: createGroup
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGroup'
        '403':
          description: Access denied - teacher role required

  /groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get group by ID
      description: Get group details and members
      operationId: getGroupById
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Group retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGroupDetails'
        '404':
          description: Group not found

    put:
      tags:
        - Groups
      summary: Update group
      description: Update group information (teacher only)
      operationId: updateGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGroup'
        '404':
          description: Group not found
        '403':
          description: Access denied

  /groups/{groupId}/students:
    post:
      tags:
        - Groups
      summary: Add student to group
      description: Add student to group (teacher only)
      operationId: addStudentToGroup
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddStudentRequest'
      responses:
        '200':
          description: Student added to group successfully
        '404':
          description: Group or student not found
        '409':
          description: Student already in group

  # Test Management Endpoints
  /tests:
    get:
      tags:
        - Tests
      summary: Get tests
      description: Get tests for current user
      operationId: getTests
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: query
          required: false
          schema:
            type: integer
            format: int64
          description: Filter by group ID
      responses:
        '200':
          description: Tests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Test'

    post:
      tags:
        - Tests
      summary: Create new test
      description: Create new test (teacher only)
      operationId: createTest
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestRequest'
      responses:
        '201':
          description: Test created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        '403':
          description: Access denied - teacher role required

  /tests/{testId}:
    get:
      tags:
        - Tests
      summary: Get test by ID
      description: Get test details
      operationId: getTestById
      security:
        - BearerAuth: []
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Test retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestDetails'
        '404':
          description: Test not found

  /tests/{testId}/start:
    post:
      tags:
        - Tests
      summary: Start test attempt
      description: Start new test attempt for student
      operationId: startTestAttempt
      security:
        - BearerAuth: []
      parameters:
        - name: testId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Test attempt started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestAttempt'
        '409':
          description: Test attempt already exists or test not available

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          minLength: 6
          maxLength: 100

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        tokenType:
          type: string
          example: "Bearer"
        expiresIn:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserProfile'

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    # User Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    # User Profile and Admin Schemas
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        isActive:
          type: boolean
        role:
          $ref: '#/components/schemas/UserRole'

    CreateStudentRequest:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - studentNumber
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        studentNumber:
          type: string
          minLength: 1
          maxLength: 20
        password:
          type: string
          minLength: 6
          maxLength: 100
        groupId:
          type: integer
          format: int64
          description: Optional - assign to group immediately

    CreateTeacherRequest:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - employeeId
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        employeeId:
          type: string
          minLength: 1
          maxLength: 20
        password:
          type: string
          minLength: 6
          maxLength: 100

    UserPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
        numberOfElements:
          type: integer
        first:
          type: boolean
        last:
          type: boolean

    UserRole:
      type: string
      enum:
        - STUDENT
        - TEACHER
        - ADMIN

    # Internal Security Schema (not exposed in API responses)
    UserSecurity:
      type: object
      description: Internal user representation with security-sensitive data
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          writeOnly: true
          description: Password hash (never returned in responses)
          minLength: 6
          maxLength: 255
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        role:
          $ref: '#/components/schemas/UserRole'
        isActive:
          type: boolean
          default: true
        studentNumber:
          type: string
          maxLength: 20
          description: Student number for STUDENT role
        employeeId:
          type: string
          maxLength: 20
          description: Employee ID for TEACHER role
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    # Group Schemas
    StudentGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        teacher:
          $ref: '#/components/schemas/UserProfile'

    StudentGroupDetails:
      allOf:
        - $ref: '#/components/schemas/StudentGroup'
        - type: object
          properties:
            students:
              type: array
              items:
                $ref: '#/components/schemas/UserProfile'

    CreateGroupRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 500

    UpdateGroupRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 500

    AddStudentRequest:
      type: object
      required:
        - studentId
      properties:
        studentId:
          type: integer
          format: int64

    # Test Schemas
    Test:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        timeLimit:
          type: integer
          description: Time limit in minutes
        allowNavigation:
          type: boolean
        randomizeOrder:
          type: boolean
        createdBy:
          $ref: '#/components/schemas/UserProfile'

    TestDetails:
      allOf:
        - $ref: '#/components/schemas/Test'
        - type: object
          properties:
            assignments:
              type: array
              items:
                $ref: '#/components/schemas/Assignment'

    CreateTestRequest:
      type: object
      required:
        - title
        - startDate
        - endDate
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        timeLimit:
          type: integer
          minimum: 1
          maximum: 480
        allowNavigation:
          type: boolean
          default: true
        randomizeOrder:
          type: boolean
          default: false

    # Assignment Schemas
    Assignment:
      type: object
      discriminator:
        propertyName: type
      required:
        - type
        - title
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        title:
          type: string
        description:
          type: string
        orderNumber:
          type: integer
        points:
          type: integer

    CodingAssignment:
      allOf:
        - $ref: '#/components/schemas/Assignment'
        - type: object
          properties:
            timeLimit:
              type: integer
              description: Time limit in milliseconds
            memoryLimit:
              type: integer
              description: Memory limit in MB
            allowedLanguages:
              type: array
              items:
                type: string

    # Test Attempt Schemas
    TestAttempt:
      type: object
      properties:
        id:
          type: integer
          format: int64
        testId:
          type: integer
          format: int64
        studentId:
          type: integer
          format: int64
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
        score:
          type: number
          format: float
        isCompleted:
          type: boolean

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string